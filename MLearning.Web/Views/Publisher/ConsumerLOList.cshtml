@model MLearning.Web.Models.AdminPublisherViewModel

@{
    ViewBag.Title = "ConsumerLOList";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.ActiveRole = "PROFESOR";
}

<script>
    home = false;
    contraer_menu();
    agregarClickItem();
    //setItemActual('#institucion');
    hacerHome(false);
</script>

@(Html.Kendo().Grid<MLearningDB.Circle>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(c => c.name);
        columns.Bound(c => c.type).Width(100);
        //columns.Bound(p => p.UnitsInStock).Width(100);
        //columns.Bound(p => p.Discontinued).Width(100);
        columns.Command(command => { command.Edit(); command.Destroy();}).Width(300);
        columns.Template(c => { }).ClientTemplate(@Html.ActionLink("Administrar", "ManageCircle", new { circle_id = "#=id#" }).ToHtmlString()).Width(150);
    
    })
    .ToolBar(toolbar => toolbar.Create())
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:430px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)

        .Events(events => events.Error("error_handler"))
        .Model(model =>{
            model.Id(c => c.id);
            model.Field(c => c.id).Editable(false);
            model.Field(c => c.created_at).Editable(false);
            model.Field(c => c.updated_at).Editable(false);
        })
        .Create(update => update.Action("Circle_Create", "Publisher"))
        .Read(read => read.Action("Circle_read", "Publisher"))
        .Update(update => update.Action("Circle_Update", "Publisher"))
        .Destroy(update => update.Action("Circle_Destroy", "Publisher"))
    )
    .Editable(editable => editable.Mode(GridEditMode.InLine))
)

<!--.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Circle"))-->
<h2>LearningObjectList</h2>

@(Html.Kendo().Grid<MLearningDB.LearningObject>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(lo => lo.title);
        columns.Bound(c => c.type).Width(100);
        columns.Bound(lo => lo.description);
        
        //columns.Bound(p => p.UnitsInStock).Width(100);
        //columns.Bound(p => p.Discontinued).Width(100);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(300);
        columns.Template(c => { }).ClientTemplate(@Html.ActionLink("Administrar", "ManageCircle", new { circle_id = "#=id#" }).ToHtmlString()).Width(150);

    })
    .ToolBar(toolbar => toolbar.Create())
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:430px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)

        .Events(events => events.Error("error_handler"))
        .Model(model =>
        {
            model.Id(c => c.id);
            model.Field(c => c.id).Editable(false);
            model.Field(c => c.created_at).Editable(false);
            model.Field(c => c.updated_at).Editable(false);
        })
        .Create(update => update.Action("Circle_Create", "Publisher"))
        .Read(read => read.Action("Circle_read", "Publisher"))
        .Update(update => update.Action("Circle_Update", "Publisher"))
        .Destroy(update => update.Action("Circle_Destroy", "Publisher"))
    )
    .Editable(editable => editable.Mode(GridEditMode.InLine))
)




<!--<p>
    @Html.ActionLink("Create New LO", "CreateLO")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.LearningObjects.FirstOrDefault().title)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LearningObjects.FirstOrDefault().type)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LearningObjects.FirstOrDefault().description)
        </th>
 
        <th>
            @Html.DisplayNameFor(model => model.LearningObjects.FirstOrDefault().url_cover)
        </th>

        <th>
            @Html.DisplayNameFor(model => model.LearningObjects.FirstOrDefault().url_background)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LearningObjects.FirstOrDefault().Publisher_id)
        </th>
      
        <th>
            @Html.DisplayNameFor(model => model.LearningObjects.FirstOrDefault().created_at)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LearningObjects.FirstOrDefault().updated_at)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model.LearningObjects) { 
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.title)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.type)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.description)
        </td>
      
        <td>
            @Html.DisplayFor(modelItem => item.url_cover)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.url_background)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Publisher_id)
        </td>
       
        <td>
            @Html.DisplayFor(modelItem => item.created_at)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.updated_at)
        </td>
        <td>
            @Html.ActionLink("Edit", "EditLO", new { lo_id=item.id }) |          
            @Html.ActionLink("Delete", "DeleteLO", new { lo_id=item.id })
        </td>
    </tr>
}
</table>-->
